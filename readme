ДОКУМЕНТАЦИЯ УСТАРЕЛА!

== StepByStep ==
=== Чистим движ от примера ===
#1 Удалите из корня все php файлы. (rm *.php)
#2 Удалите из папки template все файлы кроме: layout.php, footer.php, t_error.php
#3 Удалите файлы из папки js (Ну возможно кроме jquery :) ).
#4 Удалите файлы из папки css.
#5 Удалите все файлы из папки widgets.

=== Создаем структуру ===
#1 Создайте файл index.php в корне. Это конструктор. По умолчанию 
запускается метод run(), в обычном случае он содержит запросы к Модели,
и вызов View::render("index",$alldata);, где первый параметр 

[code]
<?php
require_once("core/environment.php");
class Index extends Constructor
{
	
	public static function run() {
		$alldata = array(
			"any"=>"some"
		);
		View::render("index",$alldata);
	}
	
	public static function documentation(){
		View::render("error",array(
			"name"=>"Описание страницы ",
			"info"=>"<a href='http://code.google.com/p/mashfw'>code.google.com/p/mashfw</a>.")
		);
	}
}

View::autoload("Index",$action);
?>
[/code]

#2 В папку template - t_index.php. Имя должно соответствовать имени 
контроллера из предыдущего пункта с префиксом t_. В нем, вы получаете 
массив $data, соответствуя примеру выше в нем один элемент $data['any']=> string("some")

#3 Основная оболочка сайта разбита на два файла - template/layout.php и template/footer.php
В них рекомендую подключать js и css через View::getJs() и View::getCss().

#4 Логика открытия страницы
- index.php
-- environment.php // проверяет наличие $_GET['action'] или = run
--- Подключение всего окружения
-- Самозапускаем класс View::autoload("Index",$action);
--- В нем запускаем метод переданный через $_GET['action'] или run
---- Отрисовываем нужный темплейт через View::render()